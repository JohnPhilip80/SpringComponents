Controller

@RestController
public class StudentController {
	private StudentService service;
	public StudentController() {
		service = new StudentService();
	}
	@GetMapping("studentlist")
	public List<Student> showAllStudents() {
		
		return service.readAllStudents();
	} 
	@PostMapping("createstudent")
	public String createStudent(@RequestBody Student student) {
		service.createStudent(student);
		return "Success";
	}
@PutMapping("updatestudent")
	public String updateStudent(@RequestBody Student student) {
		service.updateStudent(student);
		return "Success";
	}
@DeleteMapping("deletestudent/{rmp}")
	public void deleteStudent(@PathVariable ("rno") Long rno){
		service.deleteStudent(rno);
	}

}


Service


public class StudentService {
	private StudentRepository repo;
	
	public StudentService(){
		repo = new StudentRepository();
	}
	
	public List<Student> readAllStudents(){
		return repo.readAllStudents();
	} 
	public void createStudent(Student student){
		repo.createStudent(student);
	}
	public void updateStudent(Student student) {
		repo.updateStudent(student);
		}
	public void deleteStudent(Long rno){
	repo.deleteStudent(rno);
	}
}


Repository

public class StudentRepository {

	private List<Student> students;
	
	
	public StudentRepository() {
		students = new ArrayList<Student>(Arrays.asList(
				new Student(1L,"Siva","Java",85.5),
				 new Student(2L,"Murugan","Spring Boot",76.5),
				 new Student(3L,"Saraswathi",".NET",59.5),
				 new Student(4L,"Raman","HTML",90.5)
				));
	}
	public List<Student> readAllStudents(){
		return students;
	}
	public void createStudent(Student student) {
		students.add(student);
		}
	
	public void updateStudent(Student student) {
		int index = 0;
		for(int i=0;i<students.size();i++) {
			if(students.get(i).getRollNo() == student.getRollNo()) {
				index = i;
			}
		}
		students.set(index, student);
	}
public void deleteStudent(Long rno) {
		int index = 0;
		for(int i=0;i<students.size();i++) {
			if(students.get(i).getRollNo() == rno) {
				index = i;
			}
		}
		students.remove(index);
		}
}

MODELS
package com.cca.john.student.models;
public class Student {
	private Long rno;
	private String name;
	private String course;
	private Double percentage;
}
package com.cca.john.student.models;
public class StudentDto {
	private Long rno;
	private String name;
	private String course;
	private Double percentage;
}


REPOSITORY

package com.dsu.john.student.repositories;

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

import com.dsu.john.student.models.Student;

public class StudentRepository {

	private List<Student> students;
	
	
	public StudentRepository() {
		students = new ArrayList<Student>(Arrays.asList(
				new Student(1L,"Siva","Java",85.5),
				 new Student(2L,"Murugan","Spring Boot",76.5),
				 new Student(3L,"Saraswathi",".NET",59.5),
				 new Student(4L,"Raman","HTML",90.5)
				));
	}
	public List<Student> readAllStudents(){
		return students;
	}
	public void createStudent(Student student) {
		students.add(student);
		}
	public void updateStudent(Student student) {
		int index = 0;
		for(int i=0;i<students.size();i++) {
			if(students.get(i).getRno() == 
					student.getRno()) {
				index = i;
			}
		}
		students.set(index, student);
	}
	public void deleteStudent(Long rno) {
		int index = 0;
		for(int i=0;i<students.size();i++) {
			if(students.get(i).getRno() == rno) {
				index = i;
			}
		}
		students.remove(index);
		
	}
	public Student getByRno(Long rno) {
		int index = 0;
		for(int i=0;i<students.size();i++) {
			if(students.get(i).getRno() == rno) {
				index = i;
			}
		}
		return students.get(index);
	}
	
	
}


SERVICES

package com.dsu.john.student.services;

import java.util.List;

import com.dsu.john.student.models.Student;
import com.dsu.john.student.repositories.StudentRepository;

public class StudentService {
	private StudentRepository repo;
	
	public StudentService(){
		repo = new StudentRepository();
	}
	
	public List<Student> readAllStudents(){
		return repo.readAllStudents();
	}
	public void createStudent(Student student) {
		repo.createStudent(student);
		}
	public void updateStudent(Student student) {
		repo.updateStudent(student);
		}

	public void deleteStudent(Long rno) {
		repo.deleteStudent(rno);
		
	}
	public Student getByRno(Long rno) {
		return repo.getByRno(rno);
	}
}



CONTROLLER

package com.dsu.john.student.controllers;
import com.dsu.john.student.models.Student;
import com.dsu.john.student.models.StudentDto;
import com.dsu.john.student.services.StudentService;
import java.util.List;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
@Controller
@RequestMapping("/ui")
public class StudentUIController {
	private StudentService service;
	
	public StudentUIController(){
		 service = new StudentService();
	}
	@GetMapping("/")
	public String showHomePage() {
		return "student/home";
	}
	@GetMapping("/showstudents")
	public String showStudents(Model model) {
		List<Student> students = service.readAllStudents();
		model.addAttribute("students",students);
		return "student/showStudents";
	}
	
	@GetMapping("/createstudent")
	public String createStudent(Model model) {
		
		StudentDto studentDto = new StudentDto();
		model.addAttribute("studentDto",studentDto);
		return "student/createStudent";
	}
	@PostMapping("/createstudent")
	public String createStudent(@ModelAttribute StudentDto studentDto) {
		Student student = new Student();
		student.setRno(studentDto.getRno());
		student.setName(studentDto.getName());
		student.setCourse(studentDto.getCourse());
		student.setPercentage(studentDto.getPercentage());
		service.createStudent(student);
		return "redirect:/ui/showstudents";
	}
	@GetMapping("/updatestudent")
	public String updateStudent(Model model,@RequestParam("rno") Long rno) {
			Student student = service.getByRno(rno);
			StudentDto studentDto = new StudentDto();
			studentDto.setRno(student.getRno());
			studentDto.setName(student.getName());
			studentDto.setCourse(student.getCourse());
			studentDto.setPercentage(student.getPercentage());
			model.addAttribute("studentDto",studentDto);
			return "student/updateStudent";
	}
	@PostMapping("/updatestudent")
	public String updateStudent(@RequestParam("rno") Long rno, @ModelAttribute StudentDto studentDto) {
			Student student = service.getByRno(rno);
			student.setName(studentDto.getName());
			student.setCourse(studentDto.getCourse());
			student.setPercentage(studentDto.getPercentage());
			service.updateStudent(student);
			return "redirect:/ui/showstudents";
	}

	@GetMapping("/deletestudent")
	public String deleteStudent(@RequestParam("rno") Long rno) {
		service.deleteStudent(rno);
		return "redirect:/ui/showstudents";
	}

}




SHOW STUDENTS 

<!doctype html>
<html>
	<head>
		<title>DSU Students</title>
	</head>
	<body>
		<h1>Student List</h1>
		<button onclick="location.href = '/ui/createstudent'">Add New Student</button>
		<table border="2" width="80%">
			<thead>
				<tr>
					<th>RollNo</th>
					<th>Name</th>
					<th>Course</th>
					<th>Percentage</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				<tr th:each="student : ${students}">
					<td th:text="${student.rno}"></td>
					<td th:text="${student.name}"></td>
					<td th:text="${student.course}"></td>
					<td th:text="${student.percentage}"></td>
					<td>
						<a th:href="@{/ui/updatestudent(rno=${student.rno})}">Edit</a>
						<a th:href="@{/ui/deletestudent(rno=${student.rno})}" onclick="return confirm('Are you sure?')">Delete</a>
					</td>
				</tr>
			</tbody>
		</table>
	</body>
</html>

CREATE STUDENT

<!doctype html>
<html>
	<head>
		<title>DSU Students</title>
	</head>
	<body>
		<h1>New Student</h1>
		<form method="post" th:object="${studentDto}">
			<table width = 60%>
				<tr>
					<td>Roll No:</td>
					<td> <input th:field="${studentDto.rno}"></td>
				</tr>
				<tr>
					<td>Name:</td>
					<td> <input th:field="${studentDto.name}"></td>
				</tr>
				<tr>
					<td>course:</td>
					<td> <input th:field="${studentDto.course}"></td>
				</tr>
				<tr>
					<td>Percentage:</td>
					<td> <input th:field="${studentDto.percentage}"></td>
				</tr>
				<tr>
					<td><button type ="submit">Submit</button></td>
					<td><a  href="/student/showstudent">Cancel</a></td>
				</tr>
			</table>
			
		</form>

	</body>
</html>

UPDATE STUDENT

<!doctype html>
<html>
	<head>
		<title>DSU Students</title>
	</head>
	<body>
		<h1>Edit Student</h1>
		<form method="post" th:object="${studentDto}">
			<table width = 60%>
				<tr>
					<td>Roll No:</td>
					<td> <input readonly th:field="${studentDto.rno}"></td>
				</tr>
				<tr>
					<td>Name:</td>
					<td> <input th:field="${studentDto.name}"></td>
				</tr>
				<tr>
					<td>Course:</td>
					<td> <input th:field="${studentDto.course}"></td>
				</tr>
				<tr>
					<td>Percentage</td>
					<td> <input th:field="${studentDto.percentage}"></td>
				</tr>
				<tr>
					<td><button type ="submit">Submit</button></td>
					<td><a  href="/student/showStudents">Cancel</a></td>
				</tr>
			</table>
			
		</form>

	</body>
</html>


<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-devtools</artifactId>
	<scope>runtime</scope>
	<optional>true</optional>
</dependency>
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
	<groupId>com.mysql</groupId>
	<artifactId>mysql-connector-j</artifactId>
	<scope>runtime</scope>
</dependency>




